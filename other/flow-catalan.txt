El flow actual sembla que es:
1) erManager.checkGenerateDefinitions
	Ara mateix primer escull unes quantes clausules (selectClauses) i les posa a
	    std::vector<CRef> m_filteredClauses;  o bé
            std::vector<CRef> m_selectedClauses;
	que son membres de ERManager

	Despres crida a defineExtVars, que crida a extDefHeuristic i aixo afegeix les definicions a
            std::vector<ExtDef> m_extVarDefBuffer; o bé
            std::vector<ExtDef> m_extVarDefBuffer_ler;
	La funcio extDefHeuristic te diverses opcions que es defineixen a ERUserHeuristics.cc
	En concret, 3 opcions: subexpression, random i ler

2) erManager.introduceExtVars
        Basicament recorre l'estructura m_extVarDefBuff(_ler) que correspongui i l'afegeix cosetes a
	extDefs

3) Quan es crea un lemma, es crida a erManager.substitute, que pren una funció user_extSubPredicate_size_lbd que
      determina si volem fer substitucio a dins del lemma
      Aqui hi ha una mica el lio que podria ser que les definicions no estiguin propagades perque un conflicte
      ha parat la propagacio


4) erManager.checkDeleteExtVars
	esborra extension variables atenent a un cert criteri DeletionPredicate
	De moment les clausules que les contenen es mantenen amb la idea que s'acabaran esborrant perque no hi
	hi haurà definitions per les variables i no s'activaran.
	S'esborren les clausules que defineixen les variables i tambe de les estructures que es fan servir
	per a substituir en un futur



================================================================================
================================================================================
================================================================================

Aqui la gran diferencia es que el generateDefinitions serà més senzill perquè jo haig de dir quin parell vull
introduir.


